#pragma version 5

txn CloseRemainderTo
global ZeroAddress
==
assert

txn AssetCloseTo
global ZeroAddress
==
assert

txn RekeyTo
global ZeroAddress
==
assert

txn TypeEnum
int appl
==
bnz application_call

txn TypeEnum
int pay
==
bnz pay

// Check that this tx is an asset transfer
txn TypeEnum
int axfer
==
assert

// Check that the asset sender is not set (we use the Sender field, AssetSender only to be used in
// clawback txns)
txn AssetSender
global ZeroAddress
==
assert

// Check if amount 0 (opt in txn)
txn AssetAmount
int 0
==
bnz opt_in_asset

// All other functions are non opt-in asset transfers

txn XferAsset
callsub get_currency_token
==
bnz transfer_currency

// If transfer of another token it must be invoice asset
b transfer_ownership_token

// BRANCH opt_in_asset START
opt_in_asset:
  // Opt in so this contract should be the receiver
  txn AssetReceiver
  txn Sender
  ==
  assert 

  // Approve if asset type is currency token
  txn XferAsset
  callsub get_currency_token
  ==
  bnz accept

  // Approve if asset creator is minting contract (ownership token)
  b claim
// BRANCH opt_in_asset END

// BRANCH application_call START
application_call:
  txn OnCompletion
  int OptIn
  ==
  bnz opt_in_contract

  txn OnCompletion
  int NoOp
  ==
  bnz no_op

  err
// BRANCH application_call END

// BRANCH pay START
pay:
  // Permission path will check grouping and correct amounts
  global GroupSize
  int 3
  ==
  bnz permission

  // Minimum balance for minting contract to opt-in to asset
  txn Amount
  callsub get_asset_min_balance
  <=
  bnz mint

  txn Amount
  callsub get_minting_app_min_balance
  <=
  bnz mint

  err
// BRANCH pay END

// BRANCH no_op START
no_op:
  txna ApplicationArgs 0
  byte "verify"
  ==
  bnz verify

  txna ApplicationArgs 0
  byte "repay"
  ==
  bnz repay

  txna ApplicationArgs 0
  byte "mint"
  ==
  bnz mint

  txna ApplicationArgs 0
  byte "claim"
  ==
  bnz claim

  txna ApplicationArgs 0
  byte "fund"
  ==
  bnz fund

  txna ApplicationArgs 0
  byte "permission"
  ==
  bnz permission

  err
// BRANCH no_op END

// BRANCH opt_in_contract START
opt_in_contract:
  txn ApplicationID
  callsub get_matching_app
  ==
  bnz accept

  txn ApplicationID
  callsub get_minting_app
  ==
  bnz accept

  err
// BRANCH opt_in_contract END

// BRANCH transfer_currency START
transfer_currency:
  // If transfer is of currency it's either a loan or withdrawal
  // If transfer is to owner then withdrawal
  txn AssetReceiver
  callsub get_borrower
  ==
  bnz withdraw

  // If it's a loan repayment it must be grouped with an application call to matching contract
  b repay
// BRANCH transfer_currency END

// BRANCH transfer_ownership_token START
transfer_ownership_token:
  // If grouped with another two transactions then this is a verification
  global GroupSize
  int 2
  ==
  bnz verify

  err
// BRANCH transfer_ownership_token END

// BRANCH withdraw START
withdraw:
  global GroupSize
  int 1
  ==
  assert

  b accept
// BRANCH withdraw END

// BRANCH mint START
mint:
  // Group size of 16
  global GroupSize
  int 16
  ==
  assert

  // Fourth transaction is no-op mint call
  // Minting app will check the other transactions in group
  gtxn 3 TypeEnum
  int appl // Application call
  ==
  assert
  
  // Check that call is to the matching app
  gtxn 3 ApplicationID
  callsub get_minting_app
  ==
  assert
  
  // Check that it is a no-op
  gtxn 3 OnCompletion
  int NoOp
  ==
  assert
  
  // Check that it's calling the mint function
  gtxna 3 ApplicationArgs 0
  byte "mint"
  ==
  assert

  b accept
// BRANCH claim END

// BRANCH fund START
fund:
  txn ApplicationID
  callsub get_minting_app
  ==
  assert

  txn Fee
  int 0
  ==
  assert

  b mint
// BRANCH claim END

// BRANCH claim START
claim:
  // Group size of 2
  global GroupSize
  int 2
  ==
  assert

  // Second transaction is no-op claim call
  // Minting app will check the other transactions in group
  gtxn 1 TypeEnum
  int appl // Application call
  ==
  assert
  
  // Check that call is to the matching app
  gtxn 1 ApplicationID
  callsub get_minting_app
  ==
  assert
  
  // Check that it is a no-op
  gtxn 1 OnCompletion
  int NoOp
  ==
  assert
  
  // Check that it's calling the claim function
  gtxna 1 ApplicationArgs 0
  byte "claim"
  ==
  assert

  b accept
// BRANCH claim END

// BRANCH permission START
permission:
  // Group size of 3
  global GroupSize
  int 3
  ==
  assert

  // First transaction is no-op permission call
  // Minting app will check the other transactions in group
  gtxn 0 TypeEnum
  int appl // Application call
  ==
  assert
  
  // Check that call is to the matching app
  gtxn 0 ApplicationID
  callsub get_minting_app
  ==
  assert
  
  // Check that it is a no-op
  gtxn 0 OnCompletion
  int NoOp
  ==
  assert
  
  // Check that it's calling the permission function
  gtxna 0 ApplicationArgs 0
  byte "permission"
  ==
  assert

  // Second transaction is payment from this account to sender of opt in
  gtxn 1 TypeEnum
  int pay
  ==
  assert

  gtxn 1 Receiver
  gtxn 2 Sender
  ==
  assert

  gtxn 1 Sender
  txn Sender
  ==
  assert

  // Approve if opt in is to matching app and payment is of the correct amount
  gtxn 2 TypeEnum
  int appl
  ==
  bnz check_matching_app_opt_in

  // Approve if opt in is to asset (only ownership token allowed) and payment is of 100000 from this account to account opting in
  gtxn 2 TypeEnum
  int axfer
  ==
  assert

  gtxn 2 AssetAmount
  int 0
  ==
  assert

  gtxn 1 Amount
  callsub get_asset_min_balance
  <=
  assert

  b accept
// BRANCH claim END

// BRANCH check_matching_app_opt_in START
check_matching_app_opt_in:
  gtxn 2 OnCompletion
  int OptIn
  ==
  assert

  gtxn 2 ApplicationID
  callsub get_matching_app
  ==
  assert

  gtxn 1 Amount
  callsub get_matching_app_min_balance
  <=
  assert

  b accept
// BRANCH check_matching_app_opt_in END

// BRANCH verify START
verify:
  // Group size of 2
  global GroupSize
  int 2
  ==
  assert

  // First transaction is no-op verify call
  // Matching app will check the other transactions in group
  gtxn 0 TypeEnum
  int appl // Application call
  ==
  assert
  
  // Check that call is to the matching app
  gtxn 0 ApplicationID
  callsub get_matching_app
  ==
  assert
  
  // Check that it is a no-op
  gtxn 0 OnCompletion
  int NoOp
  ==
  assert
  
  // Check that it's calling the verify function
  gtxna 0 ApplicationArgs 0
  byte "verify"
  ==
  assert
  // Second transaction is transfer of ownership token to matching contract

  b accept
// BRANCH verify END

// BRANCH repay START
repay:
  // First transaction in group should be call to repay no-op
  // Matching app will check the other transactions in group
  gtxn 0 TypeEnum
  int appl // Application call
  ==
  assert
  
  // Check that call is to the matching app
  gtxn 0 ApplicationID
  callsub get_matching_app
  ==
  assert
  
  // Check that it is a no-op
  gtxn 0 OnCompletion
  int NoOp
  ==
  assert
  
  // Check that it's calling the repay function
  gtxna 0 ApplicationArgs 0
  byte "repay"
  ==
  assert

  b accept
// BRANCH repay END

// BRANCH accept START
accept:
  int 1
  return
// BRANCH accept END

// BRANCH reject START
reject:
  int 0
  return
// BRANCH accept END

// ----- SETTERS AND GETTERS -----

// SUBROUTINE get_borrower START
get_borrower:
  addr <BORROWER_ADDRESS>
  retsub
// SUBROUTINE get_borrower END

// SUBROUTINE get_currency_token START
get_currency_token:
  int <CURRENCY_TOKEN_ID>
  retsub
// SUBROUTINE get_currency_token END

// SUBROUTINE get_matching_app START
get_matching_app:
  int <MATCHING_APP_ID>
  retsub
// SUBROUTINE get_matching_app END

// SUBROUTINE get_minting_app START
get_minting_app:
  int <MINTING_APP_ID>
  retsub
// SUBROUTINE get_minting_app END

// SUBROUTINE get_minting_app_min_balance START
get_minting_app_min_balance:
  int 699500
  retsub
// SUBROUTINE get_minting_app_min_balance END

// SUBROUTINE get_matching_app_min_balance START
get_matching_app_min_balance:
  int 613500
  retsub
// SUBROUTINE get_matching_app_min_balance END

// SUBROUTINE get_asset_min_balance START
get_asset_min_balance:
  int 200000
  retsub
// SUBROUTINE get_asset_min_balance END
